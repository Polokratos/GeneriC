# Generated from ./lex.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,115,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
        1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,5,15,83,8,
        15,10,15,12,15,86,9,15,1,15,4,15,89,8,15,11,15,12,15,90,1,15,1,15,
        4,15,95,8,15,11,15,12,15,96,1,15,3,15,100,8,15,1,16,1,16,1,16,5,
        16,105,8,16,10,16,12,16,108,9,16,3,16,110,8,16,1,17,1,17,1,17,1,
        17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,6,1,0,38,38,3,0,42,42,
        65,90,97,122,4,0,42,42,48,57,65,90,97,122,1,0,49,57,1,0,48,57,3,
        0,9,10,13,13,32,32,120,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,
        0,0,0,3,44,1,0,0,0,5,46,1,0,0,0,7,48,1,0,0,0,9,50,1,0,0,0,11,52,
        1,0,0,0,13,54,1,0,0,0,15,56,1,0,0,0,17,58,1,0,0,0,19,60,1,0,0,0,
        21,62,1,0,0,0,23,65,1,0,0,0,25,69,1,0,0,0,27,75,1,0,0,0,29,78,1,
        0,0,0,31,84,1,0,0,0,33,109,1,0,0,0,35,111,1,0,0,0,37,38,5,114,0,
        0,38,39,5,101,0,0,39,40,5,116,0,0,40,41,5,117,0,0,41,42,5,114,0,
        0,42,43,5,110,0,0,43,2,1,0,0,0,44,45,5,59,0,0,45,4,1,0,0,0,46,47,
        5,40,0,0,47,6,1,0,0,0,48,49,5,41,0,0,49,8,1,0,0,0,50,51,5,60,0,0,
        51,10,1,0,0,0,52,53,5,62,0,0,53,12,1,0,0,0,54,55,5,123,0,0,55,14,
        1,0,0,0,56,57,5,125,0,0,57,16,1,0,0,0,58,59,5,44,0,0,59,18,1,0,0,
        0,60,61,5,61,0,0,61,20,1,0,0,0,62,63,5,105,0,0,63,64,5,102,0,0,64,
        22,1,0,0,0,65,66,5,102,0,0,66,67,5,111,0,0,67,68,5,114,0,0,68,24,
        1,0,0,0,69,70,5,119,0,0,70,71,5,104,0,0,71,72,5,105,0,0,72,73,5,
        108,0,0,73,74,5,101,0,0,74,26,1,0,0,0,75,76,5,43,0,0,76,77,5,43,
        0,0,77,28,1,0,0,0,78,79,5,45,0,0,79,80,5,45,0,0,80,30,1,0,0,0,81,
        83,7,0,0,0,82,81,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,
        0,85,88,1,0,0,0,86,84,1,0,0,0,87,89,7,1,0,0,88,87,1,0,0,0,89,90,
        1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,99,1,0,0,0,92,94,5,91,0,0,
        93,95,7,2,0,0,94,93,1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,
        0,0,0,97,98,1,0,0,0,98,100,5,93,0,0,99,92,1,0,0,0,99,100,1,0,0,0,
        100,32,1,0,0,0,101,110,5,48,0,0,102,106,7,3,0,0,103,105,7,4,0,0,
        104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,
        107,110,1,0,0,0,108,106,1,0,0,0,109,101,1,0,0,0,109,102,1,0,0,0,
        110,34,1,0,0,0,111,112,7,5,0,0,112,113,1,0,0,0,113,114,6,17,0,0,
        114,36,1,0,0,0,7,0,84,90,96,99,106,109,1,6,0,0
    ]

class lex(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    RETURN = 1
    SEMICOLON = 2
    BRACKET_OR = 3
    BRACKET_CR = 4
    BRACKET_OS = 5
    BRACKET_CS = 6
    BRACKET_OW = 7
    BRACKET_CW = 8
    COMMA = 9
    EQUAL = 10
    IF = 11
    FOR = 12
    WHILE = 13
    INCREMENT = 14
    DECREMENT = 15
    LVALUE = 16
    CONSTANT = 17
    WS = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'return'", "';'", "'('", "')'", "'<'", "'>'", "'{'", "'}'", 
            "','", "'='", "'if'", "'for'", "'while'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "RETURN", "SEMICOLON", "BRACKET_OR", "BRACKET_CR", "BRACKET_OS", 
            "BRACKET_CS", "BRACKET_OW", "BRACKET_CW", "COMMA", "EQUAL", 
            "IF", "FOR", "WHILE", "INCREMENT", "DECREMENT", "LVALUE", "CONSTANT", 
            "WS" ]

    ruleNames = [ "RETURN", "SEMICOLON", "BRACKET_OR", "BRACKET_CR", "BRACKET_OS", 
                  "BRACKET_CS", "BRACKET_OW", "BRACKET_CW", "COMMA", "EQUAL", 
                  "IF", "FOR", "WHILE", "INCREMENT", "DECREMENT", "LVALUE", 
                  "CONSTANT", "WS" ]

    grammarFileName = "lex.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


